{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "dc662745-7eb4-730f-cfe7-f7dfa3dadbea" : {
          "typeFullFqn" : "system.cards.html_card",
          "type" : "static",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "static",
              "name" : "function",
              "dataKeys" : [ {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Random",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.15479322438769105,
                "funcBody" : "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;"
              } ]
            } ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <style>\r\n        :root {\r\n            --font-size1: 100%;\r\n        }\r\n\r\n        .main-content1 {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            flex-direction: column;\r\n            height: 100%;\r\n        }\r\n\r\n        .main-content1 .title1 {\r\n            display: flex;\r\n            font-size: 50px;\r\n            margin-bottom: 50px;\r\n            width: 70%;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .main-content1 .slider1 {\r\n            width: 80%;\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .main-content1 .slider-input1 {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .main-content1 .slider-input1 .slider-input-text1 {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            margin-right: 10px;\r\n        }\r\n\r\n        .main-content1 .sliderValue1 {\r\n            text-align: center;\r\n            margin-top: 10px;\r\n            font-size: 18px;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div class=\"main-content1\">\r\n        <div class=\"title1\">\r\n            <div>SIRKULASI 1</div>\r\n        </div>\r\n        <div class=\"slider1\">\r\n            <input type=\"range\" min=\"0\" max=\"100\" value=\"50\" id=\"mySlider1\">\r\n        </div>\r\n        <div class=\"slider-input1\">\r\n            <div class=\"slider-input-text1\">Masukkan nilai persentase</div>\r\n            <!-- Memperbarui nilai input dengan id=\"sliderInput1\" -->\r\n            <input type=\"number\" min=\"0\" max=\"100\" id=\"sliderInput1\" value=\"50\">\r\n        </div>\r\n        <div class=\"sliderValue1\">\r\n            <div id=\"sliderVal1\">Nilai: 50</div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        var slider1 = document.getElementById(\"mySlider1\");\r\n        var input1 = document.getElementById(\"sliderInput1\");\r\n        var output1 = document.getElementById(\"sliderVal1\");\r\n\r\n        output1.innerHTML = \"Nilai: \" + slider1.value;\r\n\r\n        slider1.oninput = function () {\r\n            // output1.innerHTML = \"Nilai: \" + this.value;\r\n            input1.value = this.value;\r\n            sendDataToServer1(this.value);\r\n        };\r\n\r\n        input1.oninput = function () {\r\n            // Memperbarui nilai slider1 dan input1 saat input1 berubah\r\n            slider1.value = this.value;\r\n            sendDataToServer1(this.value);\r\n        };\r\n\r\n        function sendDataToServer1(value1) {\r\n            var data1 = {\r\n                \"bdg001_vent1\": \"\" + value1 + \"%\"\r\n            };\r\n            fetch(\"https://iot.abc-server.id/api/v1/XjsnxxhgwkOcCKIX7yPl/attributes\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(data1)\r\n                })\r\n                .then(response1 => response1.json())\r\n                .then(data1 => {\r\n                    // Mendapatkan nilai dari server\r\n                    var ventValue1 = data1.client.bdg001_vent1;\r\n\r\n                    // Menghilangkan 1 digit terakhir dari nilai dan mengubah nilai slider1 dan input1\r\n                    var truncatedValue1 = ventValue1.slice(0, -1);\r\n                    \r\n                    // Memperbarui tampilan\r\n                    output1.innerHTML = \"Nilai: \" + truncatedValue1;\r\n\r\n                    // Memperbarui nilai slider1 dan input1\r\n                    slider1.value = truncatedValue1;\r\n                    input1.value = truncatedValue1;\r\n                })\r\n                .catch(error1 => console.error(\"Error:\", error1));\r\n        }\r\n\r\n        setInterval(fetchDataFromServer1, 500);\r\n\r\n        function fetchDataFromServer1() {\r\n            fetch('https://iot.abc-server.id/api/v1/XjsnxxhgwkOcCKIX7yPl/attributes?clientKeys=bdg001_vent1')\r\n                .then(response1 => response1.json())\r\n                .then(data1 => {\r\n                    var ventValue1 = data1.client.bdg001_vent1;\r\n\r\n                    // Memperbarui nilai slider1 dan input1 saat nilai dari server berubah\r\n                    slider1.value = ventValue1.slice(0, -1);\r\n                    input1.value = ventValue1.slice(0, -1);\r\n                    \r\n                    // Memperbarui tampilan\r\n                    output1.innerHTML = \"Nilai: \" + ventValue1;\r\n                })\r\n                .catch(error1 => {\r\n                    console.error(\"Error:\", error1);\r\n                });\r\n        }\r\n        fetchDataFromServer1();\r\n    </script>\r\n</body>\r\n\r\n</html>\r\n",
              "cardCss" : ".card {\n    font-weight: bold;\n    font-size: 32px;\n    color: #999;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}"
            },
            "title" : "HTML Card",
            "dropShadow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "dc662745-7eb4-730f-cfe7-f7dfa3dadbea"
        },
        "d1604f7b-2c08-8749-3d09-f1b099e516dc" : {
          "typeFullFqn" : "system.cards.html_card",
          "type" : "static",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "static",
              "name" : "function",
              "dataKeys" : [ {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Random",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.15479322438769105,
                "funcBody" : "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;"
              } ]
            } ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <style>\r\n        :root {\r\n            --font-size2: 100%;\r\n        }\r\n\r\n        .main-content2 {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            flex-direction: column;\r\n            height: 100%;\r\n        }\r\n\r\n        .main-content2 .title2 {\r\n            display: flex;\r\n            font-size: 50px;\r\n            margin-bottom: 50px;\r\n            width: 70%;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .main-content2 .slider2 {\r\n            width: 80%;\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .main-content2 .slider-input2 {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .main-content2 .slider-input2 .slider-input-text2 {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            margin-right: 10px;\r\n        }\r\n\r\n        .main-content2 .sliderValue2 {\r\n            text-align: center;\r\n            margin-top: 10px;\r\n            font-size: 18px;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div class=\"main-content2\">\r\n        <div class=\"title2\">\r\n            <div>SIRKULASI 2</div>\r\n        </div>\r\n        <div class=\"slider2\">\r\n            <input type=\"range\" min=\"0\" max=\"100\" value=\"50\" id=\"mySlider2\">\r\n        </div>\r\n        <div class=\"slider-input2\">\r\n            <div class=\"slider-input-text2\">Masukkan nilai persentase</div>\r\n            <!-- Memperbarui nilai input dengan id=\"sliderInput2\" -->\r\n            <input type=\"number\" min=\"0\" max=\"100\" id=\"sliderInput2\" value=\"50\">\r\n        </div>\r\n        <div class=\"sliderValue2\">\r\n            <div id=\"sliderVal2\">Nilai: 50</div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        var slider2 = document.getElementById(\"mySlider2\");\r\n        var input2 = document.getElementById(\"sliderInput2\");\r\n        var output2 = document.getElementById(\"sliderVal2\");\r\n\r\n        output2.innerHTML = \"Nilai: \" + slider2.value;\r\n\r\n        slider2.oninput = function () {\r\n            input2.value = this.value;\r\n            sendDataToServer2(this.value);\r\n        };\r\n\r\n        input2.oninput = function () {\r\n            slider2.value = this.value;\r\n            sendDataToServer2(this.value);\r\n        };\r\n\r\n        function sendDataToServer2(value2) {\r\n            var data2 = {\r\n                \"bdg001_vent2\": \"\" + value2 + \"%\"\r\n            };\r\n            fetch(\"https://iot.abc-server.id/api/v1/XjsnxxhgwkOcCKIX7yPl/attributes\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(data2)\r\n                })\r\n                .then(response2 => response2.json())\r\n                .then(data2 => {\r\n                    var ventValue2 = data2.client.bdg001_vent2;\r\n                    var truncatedValue2 = ventValue2.slice(0, -1);\r\n                    output2.innerHTML = \"Nilai: \" + truncatedValue2;\r\n                    slider2.value = truncatedValue2;\r\n                    input2.value = truncatedValue2;\r\n                })\r\n                .catch(error2 => console.error(\"Error:\", error2));\r\n        }\r\n\r\n        setInterval(fetchDataFromServer2, 500);\r\n\r\n        function fetchDataFromServer2() {\r\n            fetch('https://iot.abc-server.id/api/v1/XjsnxxhgwkOcCKIX7yPl/attributes?clientKeys=bdg001_vent2')\r\n                .then(response2 => response2.json())\r\n                .then(data2 => {\r\n                    var ventValue2 = data2.client.bdg001_vent2;\r\n                    slider2.value = ventValue2.slice(0, -1);\r\n                    input2.value = ventValue2.slice(0, -1);\r\n                    output2.innerHTML = \"Nilai: \" + ventValue2;\r\n                })\r\n                .catch(error2 => {\r\n                    console.error(\"Error:\", error2);\r\n                });\r\n        }\r\n        fetchDataFromServer2();\r\n    </script>\r\n</body>\r\n\r\n</html>\r\n",
              "cardCss" : ".card {\n    font-weight: bold;\n    font-size: 32px;\n    color: #999;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}"
            },
            "title" : "HTML Card",
            "dropShadow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "d1604f7b-2c08-8749-3d09-f1b099e516dc"
        }
      },
      "states" : {
        "default" : {
          "name" : "Sirkulasi",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "dc662745-7eb4-730f-cfe7-f7dfa3dadbea" : {
                  "sizeX" : 9,
                  "sizeY" : 5,
                  "row" : 0,
                  "col" : 0
                },
                "d1604f7b-2c08-8749-3d09-f1b099e516dc" : {
                  "sizeX" : 9,
                  "sizeY" : 5,
                  "row" : 0,
                  "col" : 10
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : { },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1705246359823,
            "endTimeMs" : 1705332759823
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "509ae9d0-b3bb-11ee-a4b9-6f934fed2bf9"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "Sirkulasi",
    "title" : "Sirkulasi"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}